<?php
/**
 * Created by PhpStorm.
 * User: michaeldouglas
 * Date: 2019-06-03
 * Time: 20:06
 */

namespace App\Services\SearchService;


use App\My\Resume;

class PostElasticSearchService extends ElasticSearchService
{

    protected $type = 'posts';

    public function __construct()
    {
        parent::__construct();
    }


    public function search($data)
    {
        $searchParams = [
            ['match' => ['title' => $data]],
            ['match' => ['author' => $data]],
            ['match' => ['category' => $data]],
            ['term' => ['tags.name' => $data]]
        ];

        return parent::search($searchParams);
    }


    public function getById($id)
    {
        $this->elasticParams['id'] = $id;
        $data = $this->client->get($this->elasticParams);

        return isset($data['_source']) ? $data['_source'] : null;
    }

    public function moreLikeThis($id)
    {
        $post = $this->getById($id);

        if($post){
            unset( $this->elasticParams['id']);

            $words = $this->getMostRelevantWords(html_entity_decode($post['content']));

            $this->elasticParams['body'] = [
                'query' => [
                    'more_like_this' => [
                      'fields' => ['title', 'content'],
                      'like' => $words,
                       'min_term_freq' => 1,
                       'max_query_terms' => 12
                    ],
                ]
            ];


            $this->elasticParams['size'] = 8000;
            $data = $this->client->search($this->elasticParams);

            return $data;

        }

        return [];
    }

    /**
     * Return all words in H tags like <H1> <H2> ...
     */
    private function getMostRelevantWords($content)
    {
        preg_match_all( "#<h(\d)[^>]*?>(.*?)<[^>]*?/h\d>#i",
            $content,
            $matches,
            PREG_PATTERN_ORDER
        );
        $headings = array();
        foreach ($matches[1] as $key => $heading_key) {

            $value = $matches[2][$key];
            $hasImg = strpos($value, 'img');

            if(!$hasImg && strlen($value) > 4)
             $headings[] = $matches[2][$key];
        }

        ksort($headings);
        return $headings;
    }



    public function create($id, $data)
    {
        return parent::create($id, $data); // TODO: Change the autogenerated stub
    }


}